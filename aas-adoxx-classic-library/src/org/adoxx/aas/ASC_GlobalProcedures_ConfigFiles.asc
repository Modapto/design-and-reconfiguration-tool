# Version: 1.0.0
# Date: 2021-08-31

# This file contains global functions and procedures which help with simple
# configuration files and texts.


### Direct Dependencies:
# * ASC_GlobalFunctions_Conversion.asc


# The procedures use the ecode to inform about errors that happen.
# However ecode from CC seems to be "kind of local" unless we make it global.
SETG ecode:(0)



# The content of configuration files / string is expected to follow a specific
# structure, very similar to property files:
# * Configurations are described using normal unformatted text.
# * They use key-value pairs to describe the configuration parameters.
# * A key-value pair takes up exactly one line.
# * Keys and their values are separated with an equals sign (=). Keys can not
#     contain the equals sign, but values can.
# * Comments are lines starting with an exclamation mark (!) or a hash sign (#).
# * Any whitespace before or after a key, value or comment is irrelevant.

# The here provided procedures mostly help with transforming between a
# configuration as a string (e.g. from a file) and a configuration map. As such
# specific cases are possible:
# * The configuration map can contain keys that start with a comment character.
#   While these parts of the configuration still will be written into the
#   configuration string, they will be treated as a comment when transforming
#   the configuration string to a map again. This is useful for parts of a
#   configuration that is controlled during runtime (e.g. location of the
#   configuration file).



#------------------------------------------------------------------------------
SETG lam_cf_kvToConfigString:(lambda(key, value,
# Simply creates the used style of configuration string.
#
# key - IN - the key/member name to use in the configuration.
# value - IN - the value to be stored under the provided key/member name. Must
#     not contain any new-lines.
# 
# Example usage:
#   lam_cf_kvToConfigString(" toolName  ", "   bee-up")
#       -> returns "toolName=bee-up"
  (cond(type(key) = "string", key, STR key).trim() + "=" + cond(type(value) = "string", value, STR value).trim())
))
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
PROCEDURE global CF_CONFIG_STRING_TO_MAP configString:string configMap:reference {
# Translates a simple configuration text into a map.
# If a map is already provided then it will add/replace the values from that
# map. Otherwise it will create a new empty map.
#
# configString - IN - a text of the configuration as expected.
# configMap - IN/OUT - a map containing the configuration details as key-value
#     pairs, keeping old values that aren't replaced.
#------------------------------------------------------------------------------
  IF (type(configMap) <> "map") {
    SETL configMap:(map())
  }
  FOR configLine in:(configString) sep:("\n") {
    SETL trimmedLine:(configLine.trim())
    # Skip any empty lines or comment lines
    IF ((LEN trimmedLine = 0) OR ((trimmedLine SUB 0) = "!") OR ((trimmedLine SUB 0) = "#")) {
      NEXT
    }
    SETL separatorLocation:(search(trimmedLine, "=", 0))
    SETL key:(copy(trimmedLine, 0, separatorLocation).trim())
    SETL value:(copy(trimmedLine, separatorLocation+1, -1).trim())
    # We try to use the best fitting type
    SETL configMap[key]:(toBestFittingType(value))
  }
}



#------------------------------------------------------------------------------
PROCEDURE global CF_MAP_TO_CONFIG_STRING configMap:map configString:reference {
# Translates a map of key-value pairs into a configuration text.
# If the string already exists then new values will be appended. Otherwise it
# will use a new empty string.
#
# configMap - IN - a map containing the configuration details as key-value
#     pairs.
# configString - IN/OUT - a text of the configuration as expected.
#------------------------------------------------------------------------------
  IF (type(configString) <> "string") {
    SETL configString:("")
  } ELSIF (LEN configString) {
    IF ((configString SUB ((LEN configString)-1)) <> "\n") {
      SETL configString:(configString + "\n")
    }
  }
  FOR i from:0 to:((LEN configMap)-1) {
    SETL key:(configMap.key(i))
    IF (((key SUB 0) <> "!") AND ((key SUB 0) <> "#")) {
      SETL value:(configMap[key])
      SETL configString:(configString + lam_cf_kvToConfigString(key, value) + "\n")
    }
  }
}



#------------------------------------------------------------------------------
PROCEDURE global CF_UPDATE_CONFIG_STRING configString:reference configMap:map strict:integer {
# Updates the values of a provided configuration string with values from a
# configuration map. It:
# * Updates keys in the string with the values from the map.
# * Keeps keys and values that are not present in the map (if strict is false).
# * Adds keys and values from the map that are not present in the string.
# The character '#' is used for commenting out lines in strict mode.
#
# configString - IN/OUT - a text of the configuration as expected. Will be
#     updated according to the information of the configMap.
# configMap - IN - a map containing the configuration details as key-value
#     pairs.
# strict - IN - if true (1) then keys not present in the map will be commented
#     out. To keep configuration lines not present in the map use false (0).
#------------------------------------------------------------------------------
  # Quick ways out for empty maps
  IF ((LEN configMap) = 0) {
    IF (strict) {
      SETL newConfigString:("")
      FOR configLine in:(configString) sep:("\n") {
        SETL trimmedLine:(configLine.trim())
        IF (LEN trimmedLine = 0) {
          SETL newConfigString:(newConfigString + "\n")
        } ELSIF (((trimmedLine SUB 0) = "!") OR ((trimmedLine SUB 0) = "#")) {
          SETL newConfigString:(newConfigString + trimmedLine + "\n")
        } ELSE {
          SETL newConfigString:(newConfigString + "#" + trimmedLine + "\n")
        }
      }
      SETL configString:(newConfigString)
    } ELSE {
      EXIT
    }
  } ELSE {
    SETL newConfigString:("")
    SETL keysInFile:("")
    # Check each line if there is something to change.
    FOR configLine in:(configString) sep:("\n") {
      SETL trimmedLine:(configLine.trim())
      # Empty lines or comment lines are added as they are.
      IF (LEN trimmedLine = 0) {
        SETL newConfigString:(newConfigString + "\n")
      } ELSIF (((trimmedLine SUB 0) = "!") OR ((trimmedLine SUB 0) = "#")) {
        SETL newConfigString:(newConfigString + trimmedLine + "\n")
      } ELSE { # Other lines are processed
        SETL key:(copy(trimmedLine, 0, search(trimmedLine, "=", 0)).trim())
        # we use = as the separator since keys can't contain that character.
        SETL keysInFile:(tokcat(keysInFile, key, "="))
        IF (type(configMap[key]) <> "undefined") {
          SETL newConfigString:(newConfigString + lam_cf_kvToConfigString(key, configMap[key]) + "\n")
        } ELSIF (strict) {
          # In strict mode the lines only in the config file are commented out.
          SETL newConfigString:(newConfigString + "#" + trimmedLine + "\n")
        } ELSE {
          # In non-strict mode the lines only in the config file are preserved.
          SETL newConfigString:(newConfigString + trimmedLine + "\n")
        }
      }
    }
    # Append any keys+values that are not found in the config.
    FOR i from:0 to:((LEN configMap) - 1) {
      SETL key:(configMap.key(i))
      IF (((key SUB 0) <> "!") AND ((key SUB 0) <> "#") AND (tokindex(keysInFile, key, "=") < 0)) {
        SETL newConfigString:(newConfigString + lam_cf_kvToConfigString(key, configMap[key]) + "\n")
      }
    }
    # Remove the last new-line we append to prevent adding new empty lines every time this function is called.
    SETL configString:(copy(newConfigString, 0, (LEN newConfigString)-1))
  }
}



#------------------------------------------------------------------------------
PROCEDURE global CF_LOAD_CONFIG_FROM_FILE configFile:string configMap:reference {
# Loads the configuration from a file into a map.
# If a map is already provided then it will add/replace the values from that
# map. Otherwise it will create a new empty map.
# If the file doesn't exist or reading the file fails, then ecode will be true.
#
# configFile - IN - path to the file containing the configuration as expected.
# configMap - IN/OUT - a map containing the configuration details as key-value
#     pairs. Present values will be replaced with values from the file. Should
#     loading the content from the file fail, then it will be set to undefined.
#
# Sets ecode for errors.
#------------------------------------------------------------------------------
  CC "AdoScript" FILE_EXISTS file:(configFile)
  IF (exists) {
    CC "AdoScript" FREAD file:(configFile)
    IF (ecode) {
      # ecode from FREAD persits.
      EXIT
    } ELSE {
      SETL configString:(text)
      CF_CONFIG_STRING_TO_MAP configString:(configString) configMap:configMap
    }
  } ELSE {
    SET ecode:(1)
    EXIT
  }
}



#------------------------------------------------------------------------------
PROCEDURE global CF_SAVE_CONFIG_TO_FILE configFile:string configMap:map {
# Saves the configuration from a map to a file.
# If the file already exists it will try to replace existing or append new
# values to preserve any comments and configurations that are not part of the
# configuration map.
# If writing the file fails, then ecode will be true.
#
# configFile - IN - path to the file to store the configuration in.
# configMap - IN - a map containing the configuration details as key-value
#     pairs.
#
# Sets ecode for errors.
#------------------------------------------------------------------------------
  CC "AdoScript" FILE_EXISTS file:(configFile)
  IF (exists) {
    # Read an existing config and try to update the values within.
    CC "AdoScript" FREAD file:(configFile)
    IF (ecode) {
      # ecode from FREAD persits.
      EXIT
    } ELSE {
      SETL configString:(text)
      CF_UPDATE_CONFIG_STRING configString:configString configMap:(configMap) strict:(0)
      IF (ecode) {
        EXIT
      }
      CC "AdoScript" FWRITE file:(configFile) text:(configString)
      # ecode from FWRITE persits.
    }
  } ELSE {
    SETL configString:("")
    CF_MAP_TO_CONFIG_STRING configMap:(configMap) configString:configString
    CC "AdoScript" FWRITE file:(configFile) text:(configString)
    # ecode from FWRITE persits.
  }
}



#------------------------------------------------------------------------------
PROCEDURE global CF_EDIT_CONFIGFILE_GUI configFile:string configMap:map {
# Allows to change the content of a stored configuration file using ADOxx GUI
# elements. The provided map is used to automatically update any values that
# are already found in the configuration file.
#
# configFile - IN - path to the file with the configuration.
# configMap - IN - a map containing the configuration details as key-value
#     pairs to be used on the content of the file to update existing values or
#     extend it with new values. To not update anything simply provide an empty
#     map.
#
# Sets ecode for errors.
#------------------------------------------------------------------------------
  CC "AdoScript" FILE_EXISTS file:(configFile)
  IF (exists) {
    # Read an existing config and try to update the values within.
    CC "AdoScript" FREAD file:(configFile)
    IF (ecode) {
      # ecode from FREAD persits.
      EXIT
    } ELSE {
      SETL configString:(text)
      CF_UPDATE_CONFIG_STRING configString:configString configMap:(configMap) strict:(0)
      IF (ecode) {
        EXIT
      }
      CC "AdoScript" EDITBOX text:(configString) title:("Update configuration")
      IF (endbutton = "ok") {
        CC "AdoScript" FWRITE file:(configFile) text:(text)
        # ecode from FWRITE persits.
      }
    }
  } ELSE {
    SETL configString:("")
    CF_MAP_TO_CONFIG_STRING configMap:(configMap) configString:configString
    CC "AdoScript" EDITBOX text:(configString) title:("Set new configuration")
    IF (endbutton = "ok") {
      CC "AdoScript" FWRITE file:(configFile) text:(text)
      # ecode from FWRITE persits.
    }
  }
}



#------------------------------------------------------------------------------
PROCEDURE global CF_EDIT_CONFIGFILE_FROM_DB_GUI filter:string configMap:map {
# Allows to change the content of a configuration file stored in the library's
# database using ADOxx GUI elements. The provided map is used to automatically
# update any values that are already found in the configuration file.
#
# filter - IN - a regular expression to allow selecting only some of the files.
#     Provide an empty string to allow selecting any file.
# configMap - IN - a map containing the configuration details as key-value
#     pairs to be used on the content of the file to update existing values or
#     extend it with new values. To not update anything simply provide an empty
#     map.
#
# Sets ecode for errors.
#------------------------------------------------------------------------------
  CC "AdoScript" DB_FILE_LIST
  IF (ecode) {
    EXIT
  }
  SETL selectableFiles:(files)
  IF (filter <> "") {
    SETL filteredFiles:("")
    FOR oneFile in:(selectableFiles) sep:("*") {
      IF (regex(filter, oneFile)) {
        SETL filteredFiles:(tokcat(filteredFiles, oneFile, "*"))
      }
    }
    SETL selectableFiles:(filteredFiles)
  }
  IF (selectableFiles <> "") {
    CC "AdoScript" LISTBOX entries:(selectableFiles) toksep:("*") title:("Select configuration") boxtext:("Select configuration to edit")
    IF (endbutton = "ok") {
      CF_EDIT_CONFIGFILE_GUI configFile:("db:\\" + selection) configMap:(configMap)
    }
  } ELSE {
    CC "AdoScript" INFOBOX ("No files corresponded to the provided filter.")
  }
}